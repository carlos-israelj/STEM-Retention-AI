from models import Student, Intervention, SupportRequest, db
from config import Config
from datetime import datetime

class SupportPrioritizer:
    """Sistema de priorizaci√≥n de solicitudes de apoyo"""
    
    @staticmethod
    def calculate_priority_score(request_data):
        """
        Calcula un score de prioridad basado en m√∫ltiples factores
        Score de 0-100, donde 100 es m√°xima prioridad
        """
        score = 0.0
        
        # Factor de urgencia (40% del score)
        urgency_weights = {
            'high': 40.0,
            'medium': 25.0,
            'low': 10.0
        }
        score += urgency_weights.get(request_data.get('urgency', 'low'), 10.0)
        
        # Factor de categor√≠a (30% del score)
        category_weights = {
            'emotional': 30.0,  # Prioridad m√°xima para salud mental
            'academic': 20.0,
            'social': 15.0,
            'career': 10.0,
            'financial': 25.0,  # Importante para retenci√≥n
            'other': 12.0
        }
        score += category_weights.get(request_data.get('category', 'other'), 12.0)
        
        # An√°lisis de contenido (30% del score)
        message = request_data.get('message', '').lower()
        
        # Obtener palabras clave de crisis de la configuraci√≥n
        crisis_keywords = Config.SUPPORT_CONFIG['EMERGENCY_KEYWORDS']
        
        # Palabras clave de riesgo acad√©mico
        academic_risk_keywords = [
            'reprobar', 'fallar', 'abandonar', 'desertar', 'renunciar',
            'no entiendo nada', 'perdida', 'atrasada', 'suspender'
        ]
        
        # Palabras clave de aislamiento social
        isolation_keywords = [
            'sola', 'aislada', 'no tengo amigos', 'no encajo',
            'discriminaci√≥n', 'exclusi√≥n', 'bullying', 'acoso'
        ]
        
        # Aplicar puntajes por keywords
        if any(keyword in message for keyword in crisis_keywords):
            score += 25.0  # M√°xima prioridad para crisis
        elif any(keyword in message for keyword in academic_risk_keywords):
            score += 15.0
        elif any(keyword in message for keyword in isolation_keywords):
            score += 12.0
        
        # Bonus por longitud del mensaje (indica m√°s detalle/urgencia)
        message_length = len(message)
        if message_length > 500:
            score += 5.0
        elif message_length > 200:
            score += 2.0
        
        return min(100.0, score)
    
    @staticmethod
    def create_crisis_intervention(support_request):
        """Crear intervenci√≥n autom√°tica para casos de crisis"""
        try:
            # Buscar si hay un estudiante registrado con el email
            student = None
            if support_request.student_email:
                student = Student.query.filter_by(
                    email=support_request.student_email
                ).first()
            
            intervention_content = f"""
            ALERTA DE CRISIS DETECTADA - Solicitud de Apoyo #{support_request.id}
            
            Estudiante: {'AN√ìNIMO' if support_request.anonymous else support_request.student_name or 'No identificado'}
            Categor√≠a: {support_request.category}
            Urgencia: {support_request.urgency}
            Score de Prioridad: {support_request.priority_score}
            
            Mensaje de la estudiante:
            {support_request.message[:500]}...
            
            ACCIONES REQUERIDAS:
            1. Contacto inmediato con servicios de salud mental
            2. Verificaci√≥n de seguridad de la estudiante
            3. Plan de seguimiento intensivo
            4. Notificaci√≥n a coordinaci√≥n acad√©mica
            
            Preferencia de contacto: {support_request.contact_preference}
            """
            
            if student:
                # Crear intervenci√≥n vinculada al perfil del estudiante
                intervention = Intervention(
                    student_id=student.id,
                    level=3,  # M√°ximo nivel
                    type='counselor',
                    content=intervention_content,
                    status='pending'
                )
                db.session.add(intervention)
                
                # Actualizar nivel de intervenci√≥n del estudiante
                student.intervention_level = 3
                
            db.session.commit()
            print(f"‚úÖ Intervenci√≥n de crisis creada para solicitud #{support_request.id}")
            
        except Exception as e:
            print(f"Error creando intervenci√≥n de crisis: {e}")

class SupportNotificationSystem:
    """Sistema de notificaciones para el equipo de apoyo"""
    
    @staticmethod
    def notify_support_team(request):
        """Notificar al equipo de apoyo sobre nueva solicitud"""
        priority_score = request.priority_score
        
        if priority_score >= Config.SUPPORT_CONFIG['CRISIS_THRESHOLD']:
            # Crisis - notificaci√≥n inmediata
            SupportNotificationSystem.send_emergency_alert(request)
        elif priority_score >= Config.SUPPORT_CONFIG['HIGH_PRIORITY_THRESHOLD']:
            # Alta prioridad - notificaci√≥n en 1 hora
            SupportNotificationSystem.schedule_alert(request, delay_hours=1)
        else:
            # Prioridad normal - notificaci√≥n diaria
            SupportNotificationSystem.schedule_alert(request, delay_hours=24)
    
    @staticmethod
    def send_emergency_alert(request):
        """Alerta inmediata para crisis"""
        print(f"üö® ALERTA DE CRISIS - ID: {request.id}")
        print(f"Estudiante: {'AN√ìNIMO' if request.anonymous else request.student_name}")
        print(f"Urgencia: {request.urgency.upper()}")
        print(f"Categor√≠a: {request.category}")
        print(f"Score de prioridad: {request.priority_score}")
        print(f"Mensaje: {request.message[:100]}...")
        
        # Aqu√≠ ir√≠a la l√≥gica real de notificaci√≥n (email, SMS, Slack, etc.)
        # Por ejemplo:
        # - Enviar email a equipo de crisis
        # - Notificaci√≥n push a coordinadores
        # - Webhook a sistema de gesti√≥n
        
    @staticmethod
    def schedule_alert(request, delay_hours):
        """Programar alerta diferida"""
        print(f"üìÖ Alerta programada para {delay_hours}h - ID: {request.id}")
        # Aqu√≠ ir√≠a la l√≥gica de programaci√≥n de alertas
        # Por ejemplo:
        # - Agregar a cola de tareas con delay
        # - Programar notificaci√≥n diferida
        # - Actualizar dashboard de pendientes

class PerplexityService:
    """Servicio para generar contenido motivacional con IA"""
    
    @staticmethod
    def generate_motivational_content(student_program, risk_factors):
        """Generar contenido motivacional personalizado"""
        try:
            import requests
            
            headers = {
                "Authorization": f"Bearer {Config.PERPLEXITY_API_KEY}",
                "Content-Type": "application/json"
            }
            
            prompt = f"""
            Genera contenido motivacional espec√≠fico para una estudiante mujer de {student_program} 
            que est√° mostrando se√±ales de riesgo de deserci√≥n. Factores de riesgo identificados: {risk_factors}.
            El contenido debe ser empoderador, espec√≠fico para STEM y culturalmente sensible.
            Incluye historias de √©xito de mujeres en el campo y estrategias pr√°cticas.
            """
            
            data = {
                "model": "llama-3.1-sonar-small-128k-online",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 500
            }
            
            response = requests.post(Config.PERPLEXITY_URL, headers=headers, json=data)
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                return PerplexityService.get_default_content(student_program)
        except Exception as e:
            print(f"Error generando contenido con Perplexity: {e}")
            return PerplexityService.get_default_content(student_program)
    
    @staticmethod
    def get_default_content(student_program):
        """Contenido motivacional predeterminado por programa"""
        default_content = {
            'Ingenier√≠a de Sistemas': """
            üåü Recuerda que en tecnolog√≠a, la diversidad de perspectivas es nuestra mayor fortaleza.
            
            Mujeres pioneras como Ada Lovelace y Grace Hopper sentaron las bases de lo que hoy llamamos programaci√≥n. 
            Tu perspectiva √∫nica es exactamente lo que la industria tech necesita.
            
            üí° Estrategias que pueden ayudarte:
            ‚Ä¢ √önete a comunidades como Women in Tech o PyLadies
            ‚Ä¢ Busca mentoras en la industria
            ‚Ä¢ Practica coding un poco cada d√≠a
            ‚Ä¢ Celebra cada peque√±o logro
            
            ¬°Tu futuro en tech es brillante! üíª‚ú®
            """,
            'Ingenier√≠a Industrial': """
            üè≠ La ingenier√≠a industrial necesita m√°s mujeres l√≠deres como t√∫.
            
            Desde Lillian Gilbreth, pionera en gesti√≥n cient√≠fica, hasta ejecutivas modernas como Mary Barra (GM), 
            las mujeres han transformado la industria con enfoques innovadores y sostenibles.
            
            üí™ Fortalezas que puedes desarrollar:
            ‚Ä¢ Pensamiento sist√©mico y hol√≠stico
            ‚Ä¢ Habilidades de comunicaci√≥n y liderazgo
            ‚Ä¢ Enfoque en sostenibilidad e impacto social
            ‚Ä¢ An√°lisis detallado y mejora continua
            
            El mundo necesita tu visi√≥n para crear sistemas m√°s eficientes y humanos. üåç
            """,
            'Matem√°ticas': """
            üî¢ Las matem√°ticas son el lenguaje universal, y tu voz es esencial.
            
            Mujeres como Emmy Noether, Katherine Johnson y Maryam Mirzakhani han demostrado que 
            las matem√°ticas florecen con perspectivas diversas y mentes brillantes como la tuya.
            
            üßÆ Tu camino matem√°tico puede incluir:
            ‚Ä¢ Investigaci√≥n pura y aplicada
            ‚Ä¢ An√°lisis de datos y machine learning
            ‚Ä¢ Finanzas cuantitativas
            ‚Ä¢ Criptograf√≠a y seguridad
            
            Cada problema que resuelves abre nuevas posibilidades para el mundo. ‚àû
            """
        }
        
        return default_content.get(student_program, 
            "Recuerda que eres capaz de lograr grandes cosas en STEM. Tu perspectiva √∫nica es valiosa y necesaria. ¬°Sigue adelante! üåü")

class SupportAnalytics:
    """Servicio de an√°lisis y m√©tricas del sistema de apoyo"""
    
    @staticmethod
    def get_effectiveness_metrics():
        """Calcular m√©tricas de efectividad del sistema"""
        try:
            total_requests = SupportRequest.query.count()
            resolved_requests = SupportRequest.query.filter_by(status='resolved').count()
            crisis_requests = SupportRequest.query.filter(
                SupportRequest.priority_score >= Config.SUPPORT_CONFIG['CRISIS_THRESHOLD']
            ).count()
            
            # Tiempo promedio de respuesta
            from sqlalchemy import func
            avg_response_time = db.session.query(
                func.avg(
                    func.julianday(SupportRequest.updated_at) - 
                    func.julianday(SupportRequest.created_at)
                ) * 24  # Convertir a horas
            ).filter(SupportRequest.updated_at.isnot(None)).scalar() or 0
            
            # Distribuci√≥n de categor√≠as
            category_distribution = db.session.query(
                SupportRequest.category,
                func.count(SupportRequest.id),
                func.avg(SupportRequest.priority_score)
            ).group_by(SupportRequest.category).all()
            
            return {
                'total_requests': total_requests,
                'resolution_rate': (resolved_requests / max(total_requests, 1)) * 100,
                'crisis_rate': (crisis_requests / max(total_requests, 1)) * 100,
                'avg_response_time_hours': round(avg_response_time, 2),
                'category_insights': [
                    {
                        'category': cat,
                        'count': count,
                        'avg_priority': round(float(avg_priority), 1)
                    } for cat, count, avg_priority in category_distribution
                ]
            }
        except Exception as e:
            print(f"Error calculando m√©tricas de efectividad: {e}")
            return {}
    
    @staticmethod
    def identify_trends():
        """Identificar tendencias en el sistema de apoyo"""
        try:
            from datetime import timedelta
            
            # Comparar √∫ltimos 30 d√≠as vs 30 d√≠as anteriores
            now = datetime.utcnow()
            thirty_days_ago = now - timedelta(days=30)
            sixty_days_ago = now - timedelta(days=60)
            
            recent_requests = SupportRequest.query.filter(
                SupportRequest.created_at >= thirty_days_ago
            ).count()
            
            previous_requests = SupportRequest.query.filter(
                SupportRequest.created_at >= sixty_days_ago,
                SupportRequest.created_at < thirty_days_ago
            ).count()
            
            # Calcular tendencia
            if previous_requests > 0:
                trend_percentage = ((recent_requests - previous_requests) / previous_requests) * 100
            else:
                trend_percentage = 100 if recent_requests > 0 else 0
            
            # Categor√≠as en crecimiento
            recent_categories = db.session.query(
                SupportRequest.category,
                db.func.count(SupportRequest.id)
            ).filter(
                SupportRequest.created_at >= thirty_days_ago
            ).group_by(SupportRequest.category).all()
            
            previous_categories = db.session.query(
                SupportRequest.category,
                db.func.count(SupportRequest.id)
            ).filter(
                SupportRequest.created_at >= sixty_days_ago,
                SupportRequest.created_at < thirty_days_ago
            ).group_by(SupportRequest.category).all()
            
            # Analizar cambios por categor√≠a
            category_trends = {}
            recent_dict = dict(recent_categories)
            previous_dict = dict(previous_categories)
            
            for category in recent_dict:
                recent_count = recent_dict[category]
                previous_count = previous_dict.get(category, 0)
                
                if previous_count > 0:
                    category_change = ((recent_count - previous_count) / previous_count) * 100
                else:
                    category_change = 100 if recent_count > 0 else 0
                
                category_trends[category] = {
                    'recent_count': recent_count,
                    'previous_count': previous_count,
                    'change_percentage': round(category_change, 1)
                }
            
            return {
                'overall_trend': {
                    'recent_requests': recent_requests,
                    'previous_requests': previous_requests,
                    'change_percentage': round(trend_percentage, 1),
                    'direction': 'increasing' if trend_percentage > 5 else 'decreasing' if trend_percentage < -5 else 'stable'
                },
                'category_trends': category_trends,
                'recommendations': SupportAnalytics.generate_recommendations(trend_percentage, category_trends)
            }
        except Exception as e:
            print(f"Error identificando tendencias: {e}")
            return {}
    
    @staticmethod
    def generate_recommendations(overall_trend, category_trends):
        """Generar recomendaciones basadas en tendencias"""
        recommendations = []
        
        if overall_trend > 20:
            recommendations.append("Considerar aumentar recursos del equipo de apoyo debido al incremento significativo en solicitudes")
        
        # Identificar categor√≠a con mayor crecimiento
        if category_trends:
            fastest_growing = max(
                category_trends.items(),
                key=lambda x: x[1]['change_percentage']
            )
            
            if fastest_growing[1]['change_percentage'] > 50:
                category_name = fastest_growing[0]
                recommendations.append(f"La categor√≠a '{category_name}' muestra crecimiento acelerado - revisar recursos espec√≠ficos")
        
        # Verificar crisis
        crisis_count = SupportRequest.query.filter(
            SupportRequest.priority_score >= Config.SUPPORT_CONFIG['CRISIS_THRESHOLD'],
            SupportRequest.created_at >= datetime.utcnow() - timedelta(days=7)
        ).count()
        
        if crisis_count > 3:
            recommendations.append("Alto n√∫mero de solicitudes de crisis en la √∫ltima semana - activar protocolos de emergencia")
        
        if not recommendations:
            recommendations.append("Sistema operando dentro de par√°metros normales")
        
        return recommendations